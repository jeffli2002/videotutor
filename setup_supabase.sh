#!/bin/bash\n\n# =====================================================\n# Supabase Database Setup Script\n# =====================================================\n\necho \"üóÑÔ∏è  AI-Powered K12 Math Tutoring - Supabase Setup\"\necho \"====================================================\"\n\necho \"\nüìã SETUP INSTRUCTIONS:\"\necho \"1. Create a Supabase account at https://supabase.com\"\necho \"2. Create a new project\"\necho \"3. Go to SQL Editor in your Supabase dashboard\"\necho \"4. Copy and paste the SQL from database_setup.sql\"\necho \"5. Run the SQL script\"\necho \"6. Set up authentication providers\"\necho \"7. Create storage bucket for videos\"\necho \"8. Update your .env file with Supabase credentials\"\n\necho \"\nüîë REQUIRED CREDENTIALS:\"\necho \"You'll need these from your Supabase project:\"\necho \"- Project URL (Settings > API)\"\necho \"- Anon/Public Key (Settings > API)\"\necho \"- Optional: Service Role Key (for admin operations)\"\n\necho \"\nüìÅ SQL FILE LOCATION:\"\necho \"The complete SQL script is available at:\"\necho \"$(pwd)/database_setup.sql\"\n\necho \"\nüöÄ QUICK SETUP STEPS:\"\n\necho \"\n1Ô∏è‚É£  Open Supabase Dashboard:\"\necho \"   https://supabase.com/dashboard\"\n\necho \"\n2Ô∏è‚É£  Create New Project:\"\necho \"   - Click 'New Project'\"\necho \"   - Choose organization\"\necho \"   - Name: mathtutor-ai (or preferred name)\"\necho \"   - Database password: (create strong password)\"\necho \"   - Region: closest to your users\"\n\necho \"\n3Ô∏è‚É£  Run Database Setup:\"\necho \"   - Go to SQL Editor\"\necho \"   - Copy content from database_setup.sql\"\necho \"   - Paste and click 'Run'\"\n\necho \"\n4Ô∏è‚É£  Enable Authentication:\"\necho \"   - Go to Authentication > Settings\"\necho \"   - Site URL: http://localhost:5173 (development)\"\necho \"   - Add redirect URLs:\"\necho \"     * http://localhost:5173\"\necho \"     * http://localhost:5173/**\"\n\necho \"\n5Ô∏è‚É£  Setup Google OAuth (Optional):\"\necho \"   - Go to Authentication > Providers\"\necho \"   - Enable Google provider\"\necho \"   - Add Google OAuth credentials\"\n\necho \"\n6Ô∏è‚É£  Create Storage Bucket:\"\necho \"   - Go to Storage\"\necho \"   - Create new bucket: 'videos'\"\necho \"   - Set as public bucket\"\necho \"   - Configure RLS policies for bucket\"\n\necho \"\n7Ô∏è‚É£  Get API Credentials:\"\necho \"   - Go to Settings > API\"\necho \"   - Copy Project URL\"\necho \"   - Copy anon/public key\"\necho \"   - Update .env file\"\n\necho \"\nüîß UPDATE .env FILE:\"\necho \"Add these lines to your .env file:\"\necho \"VITE_SUPABASE_URL=your_project_url_here\"\necho \"VITE_SUPABASE_ANON_KEY=your_anon_key_here\"\n\necho \"\nüìù STORAGE BUCKET RLS POLICY:\"\necho \"For the 'videos' storage bucket, add this RLS policy:\"\necho \"\"\necho \"-- Allow authenticated users to upload videos to their own folder\"\necho \"CREATE POLICY \\\"Users can upload videos to own folder\\\" ON storage.objects\"\necho \"  FOR INSERT WITH CHECK (\"\necho \"    bucket_id = 'videos' AND \"\necho \"    auth.uid()::text = (storage.foldername(name))[1]\"\necho \"  );\"\necho \"\"\necho \"-- Allow users to view their own videos\"\necho \"CREATE POLICY \\\"Users can view own videos\\\" ON storage.objects\"\necho \"  FOR SELECT USING (\"\necho \"    bucket_id = 'videos' AND \"\necho \"    auth.uid()::text = (storage.foldername(name))[1]\"\necho \"  );\"\n\necho \"\n‚úÖ VERIFICATION:\"\necho \"After setup, verify your configuration:\"\necho \"1. Check tables exist: profiles, videos, user_preferences\"\necho \"2. Test user registration in your app\"\necho \"3. Verify RLS policies are working\"\necho \"4. Test video upload to storage bucket\"\n\necho \"\nüö® SECURITY NOTES:\"\necho \"- RLS (Row Level Security) is enabled on all tables\"\necho \"- Users can only access their own data\"\necho \"- Storage bucket should be configured with proper policies\"\necho \"- Never commit .env file to version control\"\n\necho \"\nüìû SUPPORT:\"\necho \"If you encounter issues:\"\necho \"1. Check Supabase logs in dashboard\"\necho \"2. Verify RLS policies are active\"\necho \"3. Ensure API keys are correct in .env\"\necho \"4. Check browser console for errors\"\n\necho \"\nüéØ READY TO USE:\"\necho \"Once setup is complete, restart your development server:\"\necho \"npm run dev\"\necho \"\"\necho \"Then test the authentication flow at:\"\necho \"http://localhost:5173\"\n\necho \"\n====================================================\"\necho \"üìÑ SQL Script: database_setup.sql\"\necho \"üåê Dashboard: https://supabase.com/dashboard\"\necho \"üìö Docs: https://supabase.com/docs\"\necho \"====================================================\"\n\necho \"\nüîç Checking current SQL file...\"\nif [ -f \"database_setup.sql\" ]; then\n    echo \"‚úÖ SQL file exists: $(wc -l < database_setup.sql) lines\"\n    echo \"üìä File size: $(du -h database_setup.sql | cut -f1)\"\nelse\n    echo \"‚ùå SQL file not found. Please ensure database_setup.sql exists.\"\nfi\n\necho \"\nüí° TIP: Keep this terminal open for reference while setting up Supabase!\"\n\necho \"\nüöÄ Ready to proceed? Follow the numbered steps above!\"\n\n# Optional: Open browser to Supabase (uncomment if desired)\n# echo \"\\nüåê Opening Supabase dashboard...\"\n# if command -v xdg-open > /dev/null; then\n#     xdg-open \"https://supabase.com/dashboard\"\n# elif command -v open > /dev/null; then\n#     open \"https://supabase.com/dashboard\"\n# fi