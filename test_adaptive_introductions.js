/**
 * Test Adaptive Introduction System
 * Tests contextual introduction generation for different math problems
 */

// Test cases covering different problem types and complexities
const testCases = [
  {
    name: "Simple Linear Equation",
    question: "Ëß£ÊñπÁ®ãÔºö2x + 3 = 7",
    language: "zh",
    expectedType: "equation",
    expectedComplexity: "simple"
  },
  {
    name: "Complex Calculus",
    question: "ËÆ°ÁÆóÁßØÂàÜÔºö‚à´(x^2 + 1)dx ‰ªé0Âà∞1",
    language: "zh",
    expectedType: "calculus",
    expectedComplexity: "complex"
  },
  {
    name: "Geometry Problem",
    question: "Find the area of triangle with base 8 and height 6",
    language: "en",
    expectedType: "geometry",
    expectedComplexity: "simple"
  },
  {
    name: "Statistics Data",
    question: "ËÆ°ÁÆóÊï∞ÊçÆÈõÜÁöÑÂπ≥ÂùáÂÄºÔºö2, 4, 6, 8, 10",
    language: "zh",
    expectedType: "statistics",
    expectedComplexity: "simple"
  },
  {
    name: "Matrix Operation",
    question: "Find the inverse of matrix [[1,2],[3,4]]",
    language: "en",
    expectedType: "matrix",
    expectedComplexity: "complex"
  }
]

// Mock functions for testing
function detectProblemType(question) {
  const problemTypes = {
    'equation': /ÊñπÁ®ã|equation|solve|Ëß£|=/i,
    'geometry': /Âá†‰Ωï|geometry|‰∏âËßíÂΩ¢|Èù¢ÁßØ|‰ΩìÁßØ|ÂõæÂΩ¢|length|area|volume|angle/i,
    'algebra': /‰ª£Êï∞|algebra|Â§öÈ°πÂºè|polynomial|Âõ†ÂºèÂàÜËß£|factor/i,
    'calculus': /ÂæÆÁßØÂàÜ|calculus|ÁßØÂàÜ|integral|ÂØºÊï∞|derivative|ÊûÅÈôê|limit/i,
    'statistics': /ÁªüËÆ°|statistics|Ê¶ÇÁéá|probability|Âπ≥Âùá|mean|ÊñπÂ∑Æ|variance/i,
    'trigonometry': /‰∏âËßí|trigonometry|sin|cos|tan|ËßíÂ∫¶|angle/i,
    'matrix': /Áü©Èòµ|matrix|Ë°åÂàóÂºè|determinant/i,
    'sequence': /Êï∞Âàó|sequence|Á∫ßÊï∞|series|Á≠âÂ∑Æ|Á≠âÊØî/i
  }
  
  for (const [type, pattern] of Object.entries(problemTypes)) {
    if (pattern.test(question)) {
      return type
    }
  }
  return 'general'
}

function detectProblemComplexity(question) {
  const complexPatterns = [
    /integral|ÁßØÂàÜ|‚à´/i,
    /derivative|ÂØºÊï∞|ÂæÆÂàÜ/i,
    /matrix|Áü©Èòµ/i,
    /limit|ÊûÅÈôê/i,
    /sum|‚àë|sigma/i,
    /product|‚àè|pi/i,
    /sqrt|Ê†πÂè∑|‚àö[^)]*\)|\^{[^{}]*}/,
    /frac|\frac{[^{}]*}{[^{}]*}/,
    /[‚àë‚àè‚à´‚àÇ‚àá‚àÜ‚àû‚àà‚àâ‚äÇ‚äÉ‚äÜ‚äá‚à©‚à™]/,
    /\$\$.*?\$\$/,  // ÂèåÁæéÂÖÉÁ¨¶Âè∑LaTeX
    /\\\[.*?\\\]/  // ÊñπÊã¨Âè∑LaTeX
  ]
  
  const complexityScore = complexPatterns.reduce((score, pattern) => {
    return score + (pattern.test(question) ? 1 : 0)
  }, 0)
  
  return {
    complexity: complexityScore > 0 ? 'complex' : 'simple',
    score: complexityScore,
    useLaTeX: complexityScore > 0,
    format: complexityScore > 0 ? 'latex' : 'plain'
  }
}

function buildAdaptiveIntroduction(question, language, problemType, complexity) {
  const introductions = {
    'en': {
      'equation': "Let's explore this equation together and discover how to find its solution through clear visualization and logical steps.",
      'geometry': "Geometry comes alive when we can see the shapes and relationships. Let's visualize this problem step by step.",
      'algebra': "Algebra is the language of patterns. Let's decode this problem by seeing how expressions transform and relate.",
      'calculus': "Calculus reveals the beauty of change and accumulation. Let's visualize these concepts to understand their meaning.",
      'statistics': "Data tells stories. Let's visualize this statistical problem to understand what the numbers are really saying.",
      'trigonometry': "Trigonometry connects angles and lengths. Let's see these relationships come to life through animation.",
      'matrix': "Matrices organize information beautifully. Let's visualize how these arrays transform and interact.",
      'sequence': "Sequences show patterns over time. Let's animate how these numbers evolve and relate.",
      'general': "Mathematics is beautiful when we can see it. Let's explore this problem through visualization and understanding."
    },
    'zh': {
      'equation': "ËÆ©Êàë‰ª¨‰∏ÄËµ∑Êé¢Á¥¢Ëøô‰∏™ÊñπÁ®ãÔºåÈÄöËøáÊ∏ÖÊô∞ÁöÑËßÜËßâÂåñÂíåÈÄªËæëÊ≠•È™§Êù•ÂèëÁé∞ÂÆÉÁöÑËß£Ê≥ï„ÄÇ",
      'geometry': "ÂΩìÊàë‰ª¨ËÉΩÂ§üÁúãÂà∞ÂΩ¢Áä∂ÂíåÂÖ≥Á≥ªÊó∂ÔºåÂá†‰ΩïÂ∞±ÂèòÂæóÁîüÂä®Ëµ∑Êù•„ÄÇËÆ©Êàë‰ª¨‰∏ÄÊ≠•Ê≠•ÂèØËßÜÂåñËøô‰∏™ÈóÆÈ¢ò„ÄÇ",
      'algebra': "‰ª£Êï∞ÊòØÊ®°ÂºèÁöÑËØ≠Ë®Ä„ÄÇËÆ©Êàë‰ª¨ÈÄöËøáËßÇÂØüË°®ËææÂºèÁöÑÂèòÊç¢ÂíåÂÖ≥Á≥ªÊù•Ëß£Á†ÅËøô‰∏™ÈóÆÈ¢ò„ÄÇ",
      'calculus': "ÂæÆÁßØÂàÜÊè≠Á§∫‰∫ÜÂèòÂåñÂíåÁßØÁ¥ØÁöÑÂ••Áßò„ÄÇËÆ©Êàë‰ª¨ÈÄöËøáÂèØËßÜÂåñÊù•ÁêÜËß£Ëøô‰∫õÊ¶ÇÂøµÁöÑÂê´‰πâ„ÄÇ",
      'statistics': "Êï∞ÊçÆËÆ≤Ëø∞ÁùÄÊïÖ‰∫ã„ÄÇËÆ©Êàë‰ª¨ÂèØËßÜÂåñËøô‰∏™ÁªüËÆ°ÈóÆÈ¢òÔºåÁêÜËß£Êï∞Â≠óÁúüÊ≠£ÊÉ≥ÂëäËØâÊàë‰ª¨‰ªÄ‰πà„ÄÇ",
      'trigonometry': "‰∏âËßíÂ≠¶ËøûÊé•‰∫ÜËßíÂ∫¶ÂíåÈïøÂ∫¶„ÄÇËÆ©Êàë‰ª¨ÁúãÁúãËøô‰∫õÂÖ≥Á≥ªÂ¶Ç‰ΩïÈÄöËøáÂä®ÁîªÂèòÂæóÁîüÂä®„ÄÇ",
      'matrix': "Áü©Èòµ‰ª•‰ºòÁæéÁöÑÊñπÂºèÁªÑÁªá‰ø°ÊÅØ„ÄÇËÆ©Êàë‰ª¨ÂèØËßÜÂåñËøô‰∫õÊï∞ÁªÑÂ¶Ç‰ΩïÂèòÊç¢Âíå‰∫§‰∫í„ÄÇ",
      'sequence': "Êï∞ÂàóÊòæÁ§∫‰∫ÜÈöèÊó∂Èó¥ÂèòÂåñÁöÑËßÑÂæã„ÄÇËÆ©Êàë‰ª¨Âä®ÁîªÂ±ïÁ§∫Ëøô‰∫õÊï∞Â≠óÂ¶Ç‰ΩïÊºîÂèòÂíåÂÖ≥ËÅî„ÄÇ",
      'general': "ÂΩìÊàë‰ª¨ËÉΩÂ§üÁúãÂà∞Êï∞Â≠¶Êó∂ÔºåÂÆÉÂ∞±ÂèòÂæóÁæé‰∏Ω„ÄÇËÆ©Êàë‰ª¨ÈÄöËøáÂèØËßÜÂåñÂíåÁêÜËß£Êù•Êé¢Á¥¢Ëøô‰∏™ÈóÆÈ¢ò„ÄÇ"
    }
  }
  
  const baseIntro = introductions[language]?.[problemType] || introductions[language]?.general || introductions['en'][problemType]
  
  const complexityHints = {
    'simple': "We'll use straightforward visualizations to make this clear.",
    'complex': "We'll break this down into manageable visual pieces to build deep understanding."
  }
  
  return `${baseIntro} ${complexityHints[complexity.complexity] || ''}`
}

// Test the adaptive introduction system
function runAdaptiveIntroductionTests() {
  console.log("üéØ Adaptive Introduction System Test")
  console.log("=".repeat(60))
  
  testCases.forEach((testCase, index) => {
    console.log(`\n${index + 1}. ${testCase.name}`)
    console.log(`   Question: ${testCase.question}`)
    console.log(`   Language: ${testCase.language}`)
    
    const problemType = detectProblemType(testCase.question)
    const complexity = detectProblemComplexity(testCase.question)
    const introduction = buildAdaptiveIntroduction(testCase.question, testCase.language, problemType, complexity)
    
    console.log(`   Type: ${problemType} (${testCase.expectedType} expected)`)
    console.log(`   Complexity: ${complexity.complexity} (${testCase.expectedComplexity} expected)`)
    console.log(`   Introduction: ${introduction}`)
    
    const typePassed = problemType === testCase.expectedType
    const complexityPassed = complexity.complexity === testCase.expectedComplexity
    
    console.log(`   Status: Type ${typePassed ? '‚úÖ' : '‚ùå'}, Complexity ${complexityPassed ? '‚úÖ' : '‚ùå'}`)
  })
  
  console.log("\n" + "=".repeat(60))
  console.log("üé® Narrative Style Examples")
  console.log("-".repeat(30))
  
  const narrativeStyles = {
    'equation': 'Focus on the transformation and balance of both sides',
    'geometry': 'Emphasize spatial relationships and visual constructions',
    'algebra': 'Highlight pattern recognition and symbolic manipulation',
    'calculus': 'Visualize change, accumulation, and limiting processes',
    'statistics': 'Show data distributions and probabilistic relationships',
    'trigonometry': 'Demonstrate angle relationships and periodic behavior',
    'matrix': 'Illustrate transformations and system relationships',
    'sequence': 'Display patterns and convergence behavior'
  }
  
  for (const [type, style] of Object.entries(narrativeStyles)) {
    console.log(`${type}: ${style}`)
  }
  
  console.log("\n‚úÖ Adaptive Introduction System Ready!")
}

// Run the comprehensive tests
runAdaptiveIntroductionTests()